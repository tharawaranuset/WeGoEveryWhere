

services:
  backend:
    build: ./projects/backend                 # สร้าง image จาก Dockerfile ใน folder backend
    ports:
      - "3001:3001"                 # map port 3001 ของ container → 3001 ของเครื่องเรา
    environment:
      NODE_ENV: development
      POSTGRES_HOST: db             # ใช้ชื่อ service ของ database
      POSTGRES_USER: ${POSTGRES_USER}     # อ่านจาก .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      - db                           # รอ db เริ่มก่อน
    volumes:
      - ./projects/backend:/app               # mount โค้ดจากเครื่องเพื่อ live reload
      - /app/node_modules            # แยก node_modules

  frontend:
    build: ./projects/frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      API_URL: http://backend:3001   # frontend เรียก backend ผ่าน service name
    depends_on:
      - backend
    volumes:
      - ./projects/frontend:/app
      - /app/node_modules

  db:
    image: postgres:15                # ใช้ image Postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432"                   # map port database
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com   # ไว้ใช้ login pgAdmin
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"   # เปิดเว็บ pgAdmin ที่ http://localhost:5050
    depends_on:
      - db

volumes:
  postgres_data:                       # เก็บข้อมูล database แบบ persistent